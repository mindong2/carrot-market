generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             Int         @id @default(autoincrement())
  phone          String?     @unique
  email          String?     @unique
  name           String
  avatar         String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tokens         Token[]
  products       Product[]
  favorites      Favorite[]
  posts          Post[]
  answers        Answer[]
  curiositys     Curiosity[]
  writtenReviews Review[]    @relation("writtenReviews")
  receiveReviews Review[]    @relation("receiveReviews")
  purchases      Purchase[]
  sales          Sale[]
  streams        Stream[]
  messages       Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  image       String
  price       Int
  description String     @db.MediumText
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      Int
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
  purchases   Purchase[]
  sales       Sale[]

  @@index([userId])
}

model Post {
  id         Int         @id @default(autoincrement())
  question   String      @db.MediumText
  userId     Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  latitude   Float?
  longitude  Float?
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers    Answer[]
  curiositys Curiosity[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    String   @db.MediumText
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Curiosity {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  createdById  Int
  createdForId Int
  scroe        Int      @default(5)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation("writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor   User     @relation("receiveReviews", fields: [createdForId], references: [id], onDelete: Cascade)

  @@index([createdById])
  @@index([createdForId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Stream {
  id          Int      @id @default(autoincrement())
  title       String
  price       Int
  description String   @db.MediumText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  @@index([userId])
  messages Message[]
  
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  @@index([userId])
  @@index([streamId])
}