// Prisma 셋업 (Typescript + MySQL)

// 1. npm install prisma -D

// 2. npx prisma init
// 이 명령은 schema.prisma라는 파일과 프로젝트 루트에 .env 파일을 포함하는 prisma라는 새 디렉토리를 생성했습니다. schema.prisma는 데이터베이스 연결과 Prisma Client 생성기가 있는 Prisma 스키마를 포함합니다. .env는 환경 변수를 정의하기 위한 dotenv 파일입니다. (데이터베이스 연결에 사용됨)
// https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql

// Prisma Model 예시
// https://www.prisma.io/docs/concepts/components/prisma-schema

// VSCode Prisma Extension
// https://marketplace.visualstudio.com/items?itemName=Prisma.prisma

// Planet Scale cli 설치 (윈도우)
// 1. Scoop 설치 (Windows용 커맨드 라인 설치 프로그램)
// https://scoop.sh/
// 2. scoop bucket add pscale https://github.com/planetscale/scoop-bucket.git
// 3. scoop install pscale mysql
// 4. scoop update pscale

// PlanetScale CLI를 사용하여 데이터베이스를 생성
// 먼저 pscale auth login 으로 로그인
// pscale database create yourDB --region ap-northeast

// 보안 터널을 통해 PlanetScale과 컴퓨터를 연결할 수 있다

// `pscale connect yourDB`

// pscale 에서 제공하는 URL을 데이터베이스에 연결

// .env 파일 내 `DATABASE_URL="mysql://127.0.0.1:3306/yourDB"`

// schema를 Planet Scale 에 push -> npx prisma db push

// prisma 관리자 패널 ->  npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // vitess에서는 foreign key가 없어도 오류를 내지 않기때문에 prisma에서 제약이 있도록 만든다.
  relationMode = "prisma"
}

model User {
  // @id -> model의 id 유니크 식별자
  // 필수적이지 않은 선택적인 옵션은 ?를 붙혀준다. (require X)
  id Int @id @default(autoincrement())
  phone String? @unique
  email String? @unique
  name String //require
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens Token[]
  products Product[]
  // 유저가 좋아요 버튼누른 개수, 종류등 알수있음
  favorites Favorite[]
  posts Post[]
  answers Answer[]
  curiositys Curiosity[]
}

model Token {
  // @id -> model의 id 유니크 식별자
  // 필수적이지 않은 선택적인 옵션은 ?를 붙혀준다. (require X)
  id Int @id @default(autoincrement())
  payload String @unique
  // Token 모델의 userId가 User모델의 id를 바라보고있다 따라서 userId가 User 모델의 id
  // onDlete: Cascade -> user가 삭제되었을때 Token(자식)도 함께삭제
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
}

// Home

model Product {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  name String
  image String
  price Int
  // @db로 정확한 field setting가능
  description String @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  // 해당 상품이 몇개의 좋아요를 받았는지 알수있음
  favorites Favorite[]
}

model Favorite  {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@index([productId])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 동네생활 (Community)
model Post {
  id Int @id @default(autoincrement())
  question String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers Answer[]
  curiositys Curiosity[]
}

// 동네생활 댓글 
model Answer {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@index([postId])
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

// 동네생활 궁금해요
model Curiosity {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@index([postId])
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}